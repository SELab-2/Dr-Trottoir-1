version: '3.5'
services:
  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    command:
      # Docker
      - "--providers.docker.swarmMode=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=server_default"
      # Configure entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # HTTPS
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=jens.pots@ugent.be"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # Global HTTP -> HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # Disable dashboard
      - "--api.dashboard=false"
    ports:
      - "443:443"
      - "80:80"
      # Dashboard: - "8080:8080"
    networks:
      main:
        ipv4_address: 10.0.0.2
    volumes:
      - "~/volumes/traefik:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - '~/volumes/postgresql:/var/lib/postgresql/data'
    restart: always
    networks:
      main:
        ipv4_address: 10.0.0.3
    ports:
      - "2002:5432"

  imgproxy:
    container_name: imgproxy
    hostname: imgproxy
    image: darthsim/imgproxy
    environment:
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /images/.
      IMGPROXY_ALLOWED_SOURCES: local://
      IMGPROXY_DEVELOPMENT_ERRORS_MODE: 'true'
      IMGPROXY_MAX_SRC_RESOLUTION: 100
      IMGPROXY_JPEG_PROGRESSIVE: 'true'
      IMGPROXY_BIND: ":8081"
    volumes:
      - '~/volumes/imgproxy:/images:ro'
    networks:
      main:
        ipv4_address: 10.0.0.4
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.imgproxy.rule=Host(`sel2-1.ugent.be`)"
      - "traefik.http.routers.imgproxy.rule=PathPrefix(`/imgproxy/`)"
      - "traefik.http.routers.imgproxy.entrypoints=websecure"
      - "traefik.http.routers.imgproxy.tls.certresolver=letsencrypt"
      - "traefik.http.services.imgproxy.loadbalancer.server.port=8081"
      - "traefik.http.middlewares.imgproxy.stripprefix.prefixes=/imgproxy/"

  api:
    container_name: api
    hostname: api
    build: ../api/
    networks:
      main:
        ipv4_address: 10.0.0.5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`sel2-1.ugent.be`)"
      - "traefik.http.routers.api.rule=PathPrefix(`/api/`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.api.stripprefix.prefixes=/api/"
    env_file:
        - .env
    restart: always
    ports:
      - "8080:8080"

  frontend:
    container_name: frontend
    hostname: frontend
    build: ../web/
    networks:
      main:
        ipv4_address: 10.0.0.6
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`sel2-1.ugent.be`)"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.frontend.stripprefix.prefixes=/"
    env_file:
      - .env
    restart: always
    ports:
      - "3000:3000"

networks:
  main:
    name: main
    ipam:
      config:
        - subnet: 10.0.0.0/24
